module.exports = [
  {
    _id: '5efd01c6bbfb0804d4593736',
    status: 'Done',
    name: 'Client Skeleton',
    storyPoint: 1,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Initialize Create React App and set initial file structure for client side of application.',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-25T15:56:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd05cce3f9601ec432ad94',
    status: 'Done',
    name: 'Configure NodeJS, Express, and MongoDB',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description: 'Initialize base NodeJS application',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-26T20:15:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd069ce3f9601ec432ad96',
    status: 'Done',
    name: 'Basic CRUD Controller Functions',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Write initial CRUD functions to read/write data to/from MongoDB. Controller functions will be updated once specifics for front-end requests are determined. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-26T15:15:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd07b2e3f9601ec432ad98',
    status: 'Done',
    name: 'User and Auth Controllers',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Take data from front-end auth forms and utilize bcrypt to hash & salt / decode the password. Store user data and hashed password in database. Return signed JWT to client. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-28T13:57:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0874e3f9601ec432ad9a',
    status: 'Done',
    name: 'Login and Register Views',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description: 'React Forms for register and login. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-29T17:25:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd09d3e3f9601ec432ad9c',
    status: 'Done',
    name: 'Auth Reducer and Actions',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Auth reducer holds current authenticated user if one exists, if not auth.user is empty and isAuthorized is set to false (this displays the login screen). Auth actions are: Load User - this happens at the App level, Login, Register, and Logout. Logout will reset the Redux Store to its initial value.',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-01T16:10:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0ea8e3f9601ec432ada1',
    status: 'Done',
    name: 'Project New and Edit Forms',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Use React controlled forms to manage local state within forms for creating or editing projects. Project new and edit forms reuse the same base component. ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-02T20:07:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0fcae3f9601ec432ada3',
    status: 'Done',
    name: 'Users Actions and Reducer',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "Users (as compared to auth.user) is primarily for displaying all users of the organization under the User tab in the Main Navbar. A User's name, email and role can be displayed. Site Admins can change a user's role to give them different permissions or responsibilities over projects. ",
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-03T18:34:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd1046e3f9601ec432ada6',
    status: 'Done',
    name: 'Client Role Based Authorization',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Configure client to accept user role for conditional output. (Admins can change user roles in the Users tab)',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-04T14:06:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd10cbe3f9601ec432ada8',
    status: 'Done',
    name: 'Sprint Form',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description: 'Form to Create or Edit Sprints within a Project. ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-05T17:16:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd1268e3f9601ec432adaa',
    status: 'Done',
    name: 'Tickets Actions and Reducer',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "Tickets are the most complex model as they are the main acting point of the application. Tickets store data of Project's and Sprint's reference IDs, date and time information of updates, User IDs for assigners and assignees, and Story Point information that represents amount of work in Ticket (used later for creating burndown charts). \nThe Ticket action creators perform basic CRUD operations, as well as querying Tickets based on Project or Sprint IDs to find all Tickets within a specific Project or Sprint.",
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-08T14:12:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd13f9e3f9601ec432adad',
    status: 'Done',
    name: 'Ticket Log View',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "A modified Kanban board, Ticket Log displays all Sprints within a Project as well as a Backlog (all Tickets not assigned to a Sprint). New Sprints can be created and Tickets can be Dragged between Sprints. Changing a Ticket's Sprint box also edits the Ticket data. ",
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-10T14:05:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd1731f565db04b8cd4bfa',
    status: 'Done',
    name: 'Sprint Status for Sprint Planning',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "Add field of 'status' with options: 'Planned', 'Active', 'Completed' to Sprint Schema. The Ticket Log will display the status of a Sprint and allow Admins to complete and activate Sprints. A 'Planned' Sprint is the starting status for a Sprint. A Sprint in the Ticket Log can be 'Activated' to move it to the Sprint Board for its Sprint Cycle. Once the Sprint Cycle is finished, the Sprint can be 'Completed' and the next 'Planned' Sprint can be 'Activated'. ",
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-11T16:02:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd185af565db04b8cd4bfc',
    status: 'Done',
    name: 'History Plugin to Track Ticket Changes',
    storyPoint: 20,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add mongoose-diff-history plugin to Ticket Model. This package tracks Ticket changes and records the old and new data, timestamp, and user. ',
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-15T15:51:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd195bf565db04b8cd4bfe',
    status: 'Done',
    name: 'Add History to Tickets Actions',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "Change controller's action creator for requesting a single Ticket by ID to include an embedded History object. ",
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-16T14:23:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1b56f565db04b8cd4c00',
    status: 'Done',
    name: 'History Selector and Sprint Actions/Reducer Update',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add an Action Creator to Sprint Actions to request all history for a Sprint (History of all Tickets within a Sprint) and add Sprint History object to Sprint Reducer. The History Selector will take this object and curate the data into coordinate values to be used in the Burndown Chart. ',
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-17T13:09:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1d36f565db04b8cd4c03',
    status: 'Done',
    name: 'Assigned Tickets - Gadget',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Filter Tickets by those assigned to the current user and display on Gadget. Includes Links to view the Ticket, go to the Project, and the last date it was updated. ',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-22T14:48:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd1ef59bf68f0c68258a70',
    status: 'Done',
    name: 'Active Sprints - Gadget',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Displays all Active Sprints across all projects with a link to the Sprint Board. The timeline of the Sprint is displayed with the planned start and end dates. This is especially useful for anyone looking to see what work is currently on the task-list of any team members.',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-24T16:45:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd20459bf68f0c68258a74',
    status: 'Done',
    name: 'Demo Login View',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Create login page with links to sign in as demo users. Icons for demo accounts with Font Awesome library. ',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-25T20:40:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd21259bf68f0c68258a76',
    status: 'Done',
    name: 'Dual Database Architecture ',
    storyPoint: 20,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Allow the controllers to determine which database to send a request to based on the accompanying JWT or user credentials. Create a setDB middleware that runs on all protected routes to assign mongoose models to the proper connection based on the request. \nEdit: There were many issues getting the mongoose-diff-history plugin to work with the secondary database. To solve the issue, the application uses mongoose.createConnection to create a separate connection to each database. It then initializes the mongoose models on these separate connections and adds the plugin directly to the specific schema for the Ticket model. ',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-23T18:01:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd22b89bf68f0c68258a79',
    status: 'Done',
    name: 'Deployment Test',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Push app to Heroku servers and check functionality in Prod. environment. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-06-29T19:08:00Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd23839bf68f0c68258a7b',
    status: 'Done',
    name: 'Role Based Authentication',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Back-end: Update Auth middleware to additionally check for sufficient user status for requested route. Define Auth-level for each route.\nFront-end: Add conditional renders to all role-related components. Admins have full access. Users can only perform CRUD functions on Tickets. View-Only do not have any CRUD ability. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-06-30T19:04:00Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd24199bf68f0c68258a7d',
    status: 'Done',
    name: 'Logo and Branding',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea87caa3df971814d84275',
    assignedBy: '5eea77c32da1f336188d4567',
    description: 'Design Application Logo and change official name to Logger. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-07-02T15:09:00Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd24c49bf68f0c68258a7f',
    status: 'To-Do',
    name: 'Complete Sprint Validation',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add pop-up modal to confirm the completion of a Sprint. If all Tickets are completed allow the Sprint to be completed. If Tickets are left uncompleted, ask the user if they would like to move the uncompleted tickets to the Backlog. ',
    created: '2020-07-02T18:06:16Z',
    updated: '2020-07-02T18:06:16Z',
    __v: 0,
    sprint: null,
  },
  {
    _id: '5efd026cbbfb0804d4593737',
    status: 'Done',
    name: 'Mongoose Schema Design',
    storyPoint: 20,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Design initial schema structure for mongoose. Prior to completing this ticket, the most common instances of data flow should be considered. \nEdit: For this application, it was decided for the One-to-Many Relationships to use Document References rather than Embedded Documents. For example, one Sprint will have many Tickets. To avoid mutable and growing arrays, the Sprint object will not store any data on its Tickets. Each Ticket object will have a reference ID field associated with the Sprint. In this way, if a Ticket is deleted or a Ticket is moved to another Sprint, only the corresponding Ticket will have to be updated. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-28T14:32:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0633e3f9601ec432ad95',
    status: 'Done',
    name: 'Define Express Routes',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Create Routes to link HTTP request to corresponding Controller. Each Controller and Route should be divided by main Mongoose Model used. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-26T18:02:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0733e3f9601ec432ad97',
    status: 'Done',
    name: 'Authentication Middleware',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Middleware to be included on all protected routes by verifying the JSON Web Token. If the token is valid, grant authorization to the protected route. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-27T19:46:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0831e3f9601ec432ad99',
    status: 'Done',
    name: 'Shards React Styling Template',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Purchase Shards React Pro license and integrate base files and packages into Client. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-29T13:43:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0912e3f9601ec432ad9b',
    status: 'Done',
    name: 'Redux Store',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Initialize Redux store for state management in Client app. Wrap application in Redux Provider. ',
    created: '2020-05-22T18:22:14Z',
    updated: '2020-05-29T21:05:00Z',
    __v: 0,
    sprint: '5f00ce81d2c92a33503e863f',
  },
  {
    _id: '5efd0a6ae3f9601ec432ad9d',
    status: 'Done',
    name: 'Main Navbar',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'The Main Navbar holds primary tabs. It is split into two sections: Guest Links and Auth Links depending on whether there is an authenticated user. Guest Links include Login, Register, and Demo User. Auth Links include the protected routes for Dashboard, Projects, Users, Make Ticket, and Logout. ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-01T20:01:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0d92e3f9601ec432ad9e',
    status: 'Done',
    name: 'Sidebar',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "The Sidebar holds links specific to individual projects. It is accessed by either clicking the Projects tab in the Main Navbar or the blue toggle button in the upper left corner.  When the Projects tab is clicked, the Sidebar resets to display all Projects within the organization's database. Clicking on a Project within the Sidebar will display links to the Project's Ticket Log, Sprint Board, and Charts. ",
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-01T21:21:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0defe3f9601ec432ad9f',
    status: 'Done',
    name: 'Sidebar Project Links',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "The Sidebar will load React Router Links to the Project's Log, Board & Charts depending on if a Project has been selected.",
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-02T13:05:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0e26e3f9601ec432ada0',
    status: 'Done',
    name: 'Sidebar Reducer',
    storyPoint: 1,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Store the state of the Sidebar (selected project and open/closed) in the Redux Store.',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-02T17:33:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0f48e3f9601ec432ada2',
    status: 'Done',
    name: 'Projects Reducer and Actions',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'The projects action creators can select all projects or a specific project by ID. Create and Edit action creators send HTTP requests to CRUD express routes in the back-end. The response data (Project) is stored under Projects in the Redux Store. ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-03T12:55:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd0ff1e3f9601ec432ada4',
    status: 'Done',
    name: 'Users View',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Table to display all Users and allow Admins to change User roles.',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-03T20:18:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd10aee3f9601ec432ada7',
    status: 'Done',
    name: 'Sprints Actions and Reducer',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Sprint action creators include Create, Load, and Edit. Sprint Reducer stores response object in Redux Store sprints ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-04T18:06:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd1126e3f9601ec432ada9',
    status: 'Done',
    name: 'Form Containers',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Pull all Redux state management out of Form Display components to Container components. This keeps separation of concerns between components that display from props and those that interact with and make changes to application level state. ',
    created: '2020-05-29T18:17:13Z',
    updated: '2020-06-05T20:01:00Z',
    __v: 0,
    sprint: '5f00cf6ed2c92a33503e8661',
  },
  {
    _id: '5efd137be3f9601ec432adac',
    status: 'Done',
    name: 'Sprint Board View',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "The Sprint Board works like a typical Kanban board, allowing users to drag Tickets between categories corresponding to their completion status ('To-Do', 'In-progress', 'Done'). The board saves edits to tickets made by moving tickets between columns. Tickets can be viewed in detail in a pop-up modal (TBD) and edited.",
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-08T20:02:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd1442e3f9601ec432adae',
    status: 'Done',
    name: 'Loading Selector',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "A single loading selector is created to take dispatched Redux Actions (such as GET_TICKETS_REQUEST) and add a 'loading' object to the Redux Store. When all requests have been resolved, the 'loader' resolves to false. This value is used to determine the loading state of page components. ",
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-10T21:01:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd1786f565db04b8cd4bfb',
    status: 'Done',
    name: 'Buttons on Sprint Board and Ticket Log',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add buttons to the Sprint Board and Ticket Log Views to allow for editing Sprints, changing Sprint status, and making a new Sprint. These buttons are only visible to users with role Admin. ',
    created: '2020-06-05T18:14:33Z',
    updated: '2020-06-11T20:12:00Z',
    __v: 0,
    sprint: '5f00cf80d2c92a33503e8662',
  },
  {
    _id: '5efd18d5f565db04b8cd4bfd',
    status: 'Done',
    name: 'History Routes and Controller',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add controller and routes for fetching requested History data from MongoDB. Can fetch data based on Ticket ID or Sprint ID (used for burndown chart)',
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-15T20:36:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1a7df565db04b8cd4bff',
    status: 'Done',
    name: 'Charts & Metrics View',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "Use ChartJS to create a Sprint Burndown Chart. Set bounds to Start and End Date of Sprint. Add all Tickets' Story Points to get total SP value for Sprint. Use history of all tickets in Sprint to determine when their corresponding status was changed from 'To-Do' or 'In-Progress' to 'Done'. Use the Timestamp of this change to subtract from the current value in the Burndown chart over the lifespan of the Sprint. Naturally, if the Tickets are moved all at once or not completed within the lifespan of the Sprint, the chart will not yield ideal results. ",
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-16T18:03:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1c0cf565db04b8cd4c01',
    status: 'Done',
    name: 'Dashboard View',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'The Dashboard will consist of gadgets that take up a predetermined section of the page (1/4 or 1/2). These gadgets will display quick information for the user upon login. Current gadgets will include a pie chart of all tickets based on status, a list of tickets assigned to that user, and a list of all active sprints across projects within the organization. Because the gadgets are a fixed size, if the data is larger than the allotted space, the gadgets will have individual scrollbars. ',
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-18T17:02:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1c6af565db04b8cd4c02',
    status: 'Done',
    name: 'Ticket Status - Gadget',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Use ChartJS to create a Pie chart of all Tickets broken down by status. ',
    created: '2020-06-12T18:21:15Z',
    updated: '2020-06-19T18:54:00Z',
    __v: 0,
    sprint: '5f00cf8dd2c92a33503e8663',
  },
  {
    _id: '5efd1e679bf68f0c68258a6f',
    status: 'Done',
    name: 'View Ticket Modal',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      "A pop-up modal that provides a quick display to all ticket information while remaining on the same page. The modal displays the same information as the Ticket form, as well as dates Created and Updated. The Ticket's History can be viewed by clicking the 'View History' Button. This is where the mongoose-diff-history plugin is utilized most to display all Ticket history in chronological order categorized by type of change. The modal also includes a button to the Edit Ticket Form. ",
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-23T21:02:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd1f699bf68f0c68258a71',
    status: 'Done',
    name: 'MomentJS for Time Display',
    storyPoint: 1,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add react-moment package for displaying time in several components. ',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-25T16:15:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd20829bf68f0c68258a75',
    status: 'Done',
    name: 'Demo Database',
    storyPoint: 3,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Initialize second Demo database in MongoDB and connect to app. Create Demo Users in database. ',
    created: '2020-06-19T18:27:48Z',
    updated: '2020-06-26T17:25:00Z',
    __v: 0,
    sprint: '5f00cfa2d2c92a33503e8664',
  },
  {
    _id: '5efd227a9bf68f0c68258a78',
    status: 'In-Progress',
    name: 'Connect Demo Login to Demo Users',
    storyPoint: 2,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea77c32da1f336188d4567',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Connect the links on the Demo Login View to the credentials to login as a Demo Account and use the Demo Database. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-06-29T15:07:00Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd22e29bf68f0c68258a7a',
    status: 'To-Do',
    name: 'Mobile Responsiveness',
    storyPoint: 13,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Optimize all pages to be fully responsive and user friendly on mobile. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-06-26T18:20:34Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd23e49bf68f0c68258a7c',
    status: 'To-Do',
    name: 'Skeleton / Page Loaders',
    storyPoint: 5,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'Add loaders to each view. The dashboard will use gadget specific loaders. The Project tabs will use both a regular loader and skeleton loaders for data in the header. The skeleton loaders allow the application to appear to load faster and smoother to the user. ',
    created: '2020-06-26T18:20:34Z',
    updated: '2020-06-26T18:20:34Z',
    __v: 0,
    sprint: '5f00cfb9d2c92a33503e8665',
  },
  {
    _id: '5efd24849bf68f0c68258a7e',
    status: 'To-Do',
    name: 'Landing Page',
    storyPoint: 8,
    project: '5efcfc9de4210d2454a66938',
    assignedTo: '5eea8757c45e2a23b8e039f0',
    assignedBy: '5eea77c32da1f336188d4567',
    description:
      'The landing page will incorporate demo views of the application. This will allow users to understand what the application is and what it can provide without having to yet navigate any portion of the application. Either .gif, slideshow, or long form landing page. Have a call to action to check out the Demo Accounts. ',
    created: '2020-07-02T18:06:16Z',
    updated: '2020-07-02T18:06:16Z',
    __v: 0,
    sprint: null,
  },
];
